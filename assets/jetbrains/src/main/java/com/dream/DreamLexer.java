// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/com/dream/DreamLexer.flex

package com.dream;


public class DreamLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\4\1\6\1\0\2\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\12\16\1\0\1\17\1\20"+
    "\1\21\1\22\1\23\1\0\2\24\1\25\10\24\1\26"+
    "\5\24\1\27\1\30\3\24\1\31\3\24\1\32\1\33"+
    "\1\34\1\35\1\24\1\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\24\1\47\1\50"+
    "\1\24\1\51\1\52\2\24\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\24\1\61\1\24\1\62\1\63\1\62"+
    "\1\64\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\1\4\1\5"+
    "\2\3\1\6\1\7\2\3\4\10\1\11\15\10\1\12"+
    "\1\3\1\0\1\13\2\0\1\14\1\0\3\10\1\15"+
    "\3\3\7\10\1\16\16\10\4\0\3\10\3\0\20\10"+
    "\2\0\1\6\14\10\2\0\1\10\1\16\5\10\2\0"+
    "\3\10\11\0\1\17\5\0\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\65\0\65"+
    "\0\u013e\0\u0173\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\65\0\65\0\324\0\65\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\65\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0247\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u0d0b\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u126d\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\65\0\u1942\0\u1977"+
    "\0\u19ac\0\u19e1\0\u1a16\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\4"+
    "\1\16\1\2\1\17\1\20\1\17\1\21\1\17\1\22"+
    "\1\2\1\23\2\2\1\17\1\24\1\25\1\26\1\27"+
    "\1\30\2\17\1\31\1\17\1\32\1\33\1\17\1\34"+
    "\1\35\1\36\1\17\1\37\1\40\1\17\1\41\1\2"+
    "\1\42\66\0\2\3\103\0\1\42\43\0\5\43\1\44"+
    "\25\43\1\45\15\43\1\0\13\43\6\0\1\42\12\0"+
    "\1\42\56\0\1\42\5\0\1\42\53\0\1\46\4\0"+
    "\1\47\3\0\1\42\61\0\1\13\14\0\1\50\51\0"+
    "\1\4\1\42\64\0\1\42\1\4\60\0\1\17\5\0"+
    "\6\17\4\0\24\17\21\0\1\17\5\0\6\17\4\0"+
    "\14\17\1\51\7\17\21\0\1\17\5\0\6\17\4\0"+
    "\4\17\1\52\17\17\21\0\1\17\5\0\6\17\4\0"+
    "\15\17\1\53\6\17\3\0\2\54\2\0\4\54\1\4"+
    "\1\55\11\54\1\56\11\54\1\4\25\54\1\57\1\54"+
    "\16\0\1\17\5\0\6\17\4\0\14\17\1\60\1\61"+
    "\6\17\21\0\1\17\5\0\6\17\4\0\1\62\6\17"+
    "\1\63\2\17\1\64\1\17\1\65\7\17\21\0\1\17"+
    "\5\0\6\17\4\0\4\17\1\66\7\17\1\67\7\17"+
    "\21\0\1\17\5\0\6\17\4\0\12\17\1\70\11\17"+
    "\21\0\1\17\5\0\6\17\4\0\1\27\7\17\1\71"+
    "\1\17\1\72\1\17\1\73\3\17\1\74\3\17\21\0"+
    "\1\17\5\0\6\17\4\0\5\17\1\67\5\17\1\75"+
    "\10\17\21\0\1\17\5\0\6\17\4\0\4\17\1\75"+
    "\17\17\21\0\1\17\5\0\6\17\4\0\4\17\1\76"+
    "\17\17\21\0\1\17\5\0\6\17\4\0\4\17\1\77"+
    "\17\17\21\0\1\17\5\0\6\17\4\0\17\17\1\100"+
    "\2\17\1\101\1\17\21\0\1\17\5\0\6\17\4\0"+
    "\7\17\1\102\5\17\1\103\6\17\21\0\1\17\5\0"+
    "\6\17\4\0\1\73\13\17\1\104\7\17\21\0\1\17"+
    "\5\0\6\17\4\0\7\17\1\105\14\17\36\0\1\106"+
    "\41\0\1\107\21\0\1\110\32\0\2\47\2\0\61\47"+
    "\2\111\2\0\61\111\16\0\1\17\5\0\6\17\4\0"+
    "\13\17\1\112\10\17\21\0\1\17\5\0\6\17\4\0"+
    "\1\113\23\17\21\0\1\17\5\0\6\17\4\0\10\17"+
    "\1\114\13\17\24\0\1\42\11\0\1\115\64\0\1\116"+
    "\52\0\1\42\11\0\1\117\47\0\1\17\5\0\6\17"+
    "\4\0\14\17\1\120\7\17\21\0\1\17\5\0\6\17"+
    "\4\0\4\17\1\121\17\17\21\0\1\17\5\0\6\17"+
    "\4\0\16\17\1\122\1\123\4\17\21\0\1\17\5\0"+
    "\6\17\4\0\1\73\23\17\21\0\1\17\5\0\6\17"+
    "\4\0\1\124\23\17\21\0\1\17\5\0\6\17\4\0"+
    "\13\17\1\125\10\17\21\0\1\17\5\0\6\17\4\0"+
    "\5\17\1\126\16\17\21\0\1\17\5\0\6\17\4\0"+
    "\16\17\1\122\5\17\21\0\1\17\5\0\6\17\4\0"+
    "\13\17\1\127\10\17\21\0\1\17\5\0\6\17\4\0"+
    "\14\17\1\130\7\17\21\0\1\17\5\0\6\17\4\0"+
    "\15\17\1\67\6\17\21\0\1\17\5\0\6\17\4\0"+
    "\13\17\1\131\10\17\21\0\1\17\5\0\6\17\4\0"+
    "\17\17\1\67\4\17\21\0\1\17\5\0\6\17\4\0"+
    "\22\17\1\67\1\17\21\0\1\17\5\0\6\17\4\0"+
    "\17\17\1\132\4\17\21\0\1\17\5\0\6\17\4\0"+
    "\15\17\1\133\6\17\21\0\1\17\5\0\6\17\4\0"+
    "\10\17\1\134\13\17\21\0\1\17\5\0\6\17\4\0"+
    "\15\17\1\135\6\17\21\0\1\17\5\0\6\17\4\0"+
    "\20\17\1\122\2\17\1\67\21\0\1\17\5\0\6\17"+
    "\4\0\10\17\1\136\13\17\21\0\1\17\5\0\6\17"+
    "\4\0\10\17\1\137\13\17\3\0\2\43\2\0\61\43"+
    "\32\0\1\140\106\0\1\141\26\0\1\142\64\0\1\17"+
    "\5\0\6\17\4\0\16\17\1\143\5\17\21\0\1\17"+
    "\5\0\6\17\4\0\3\17\1\144\20\17\21\0\1\17"+
    "\5\0\6\17\4\0\17\17\1\145\4\17\14\0\1\42"+
    "\76\0\1\4\124\0\1\42\17\0\1\17\5\0\6\17"+
    "\4\0\12\17\1\67\11\17\21\0\1\17\5\0\6\17"+
    "\4\0\1\146\23\17\21\0\1\17\5\0\6\17\4\0"+
    "\4\17\1\67\17\17\21\0\1\17\5\0\6\17\4\0"+
    "\2\17\1\147\21\17\21\0\1\17\5\0\6\17\4\0"+
    "\16\17\1\150\5\17\21\0\1\17\5\0\6\17\4\0"+
    "\17\17\1\151\4\17\21\0\1\17\5\0\6\17\4\0"+
    "\1\152\23\17\21\0\1\17\5\0\6\17\4\0\1\153"+
    "\23\17\21\0\1\17\5\0\6\17\4\0\1\75\23\17"+
    "\21\0\1\17\5\0\6\17\4\0\2\17\1\67\21\17"+
    "\21\0\1\17\5\0\6\17\4\0\20\17\1\154\3\17"+
    "\21\0\1\17\5\0\6\17\4\0\10\17\1\155\7\17"+
    "\1\156\3\17\21\0\1\17\5\0\6\17\4\0\17\17"+
    "\1\123\4\17\21\0\1\17\5\0\6\17\4\0\14\17"+
    "\1\76\7\17\21\0\1\17\5\0\6\17\4\0\3\17"+
    "\1\67\20\17\21\0\1\17\5\0\6\17\4\0\12\17"+
    "\1\122\11\17\40\0\1\157\57\0\1\160\52\0\1\17"+
    "\5\0\6\17\4\0\14\17\1\137\7\17\21\0\1\17"+
    "\5\0\2\17\1\161\3\17\4\0\24\17\21\0\1\17"+
    "\5\0\6\17\4\0\4\17\1\162\17\17\21\0\1\17"+
    "\5\0\6\17\4\0\11\17\1\67\12\17\21\0\1\17"+
    "\5\0\6\17\4\0\7\17\1\67\14\17\21\0\1\17"+
    "\5\0\6\17\4\0\16\17\1\67\5\17\21\0\1\17"+
    "\5\0\6\17\4\0\10\17\1\163\13\17\21\0\1\17"+
    "\5\0\6\17\4\0\20\17\1\164\3\17\21\0\1\17"+
    "\5\0\6\17\4\0\12\17\1\165\11\17\21\0\1\17"+
    "\5\0\6\17\4\0\15\17\1\166\6\17\21\0\1\17"+
    "\5\0\6\17\4\0\13\17\1\167\10\17\21\0\1\17"+
    "\5\0\6\17\4\0\2\17\1\75\21\17\37\0\1\170"+
    "\64\0\1\171\46\0\1\17\5\0\6\17\4\0\10\17"+
    "\1\172\13\17\21\0\1\17\5\0\6\17\4\0\13\17"+
    "\1\173\10\17\21\0\1\17\5\0\6\17\4\0\12\17"+
    "\1\75\11\17\21\0\1\17\5\0\6\17\4\0\12\17"+
    "\1\174\11\17\21\0\1\17\5\0\6\17\4\0\13\17"+
    "\1\67\10\17\21\0\1\17\5\0\6\17\4\0\6\17"+
    "\1\67\15\17\13\0\1\175\64\0\1\176\72\0\1\17"+
    "\5\0\6\17\4\0\13\17\1\122\10\17\21\0\1\17"+
    "\5\0\6\17\4\0\20\17\1\122\3\17\21\0\1\17"+
    "\5\0\6\17\4\0\23\17\1\67\26\0\1\177\64\0"+
    "\1\200\74\0\1\201\64\0\1\202\41\0\1\203\64\0"+
    "\1\204\71\0\1\205\64\0\1\206\132\0\1\207\16\0"+
    "\1\210\64\0\1\211\64\0\1\212\63\0\1\213\60\0"+
    "\1\214\54\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6731];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\3\1\1\11\24\1\2\11"+
    "\1\0\1\11\2\0\1\1\1\0\3\1\1\11\31\1"+
    "\4\0\3\1\3\0\20\1\2\0\15\1\2\0\7\1"+
    "\2\0\3\1\11\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DreamLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 17: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 18: break;
          case 3:
            { return DreamTokenTypes.OPERATOR;
            }
          // fall through
          case 19: break;
          case 4:
            { return DreamTokenTypes.PAREN;
            }
          // fall through
          case 20: break;
          case 5:
            { return DreamTokenTypes.COMMA;
            }
          // fall through
          case 21: break;
          case 6:
            { return DreamTokenTypes.NUMBER;
            }
          // fall through
          case 22: break;
          case 7:
            { return DreamTokenTypes.SEMICOLON;
            }
          // fall through
          case 23: break;
          case 8:
            { return DreamTokenTypes.IDENTIFIER;
            }
          // fall through
          case 24: break;
          case 9:
            { return DreamTokenTypes.BRACKET;
            }
          // fall through
          case 25: break;
          case 10:
            { return DreamTokenTypes.BRACE;
            }
          // fall through
          case 26: break;
          case 11:
            { return DreamTokenTypes.STRING;
            }
          // fall through
          case 27: break;
          case 12:
            { return DreamTokenTypes.COMMENT;
            }
          // fall through
          case 28: break;
          case 13:
            { return DreamTokenTypes.DOT;
            }
          // fall through
          case 29: break;
          case 14:
            { return DreamTokenTypes.KEYWORD;
            }
          // fall through
          case 30: break;
          case 15:
            { return DreamTokenTypes.COMMENTBLOCK;
            }
          // fall through
          case 31: break;
          case 16:
            { return DreamTokenTypes.COMMENTDOC;
            }
          // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
