// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/com/dream/DreamLexer.flex

package com.dream;



import java.util.BitSet;

public class DreamLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\2\4\1\3\22\0\1\2"+
    "\1\5\1\6\2\0\1\5\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\12\20\1\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\0\2\26\1\27"+
    "\10\26\1\30\5\26\1\31\1\32\3\26\1\33\3\26"+
    "\1\34\1\35\1\36\1\37\1\26\1\0\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\26"+
    "\1\51\1\52\1\26\1\53\1\54\2\26\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\3\26\1\63\1\64\1\63"+
    "\1\65\6\0\1\4\32\0\1\66\u01df\0\1\66\177\0"+
    "\13\66\35\0\2\4\5\0\1\66\57\0\1\66\240\0"+
    "\1\66\377\0\u0100\67";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\1\1\3\1\4\1\5"+
    "\2\3\1\6\1\7\2\3\1\10\1\11\1\12\1\3"+
    "\24\0\1\13\2\0\1\14\1\0\1\15\3\3\2\0"+
    "\1\16\46\0\1\17\11\0\1\6\40\0\1\20\5\0"+
    "\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\250\0\250\0\u01f8\0\u0230\0\u0268\0\250\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\250\0\250\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u0188\0\250\0\u07a8\0\u07e0\0\u0818\0\u0850\0\250\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\250\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\250\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u0f18\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0"+
    "\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\250\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\0\1\7\1\10\1\11\2\12"+
    "\2\4\1\13\1\14\1\4\1\15\1\16\1\17\1\20"+
    "\1\7\1\21\1\4\6\22\1\4\1\23\2\4\23\22"+
    "\1\24\1\4\1\25\1\4\2\0\1\26\76\0\1\27"+
    "\175\0\1\30\1\31\1\30\1\32\1\30\1\33\4\0"+
    "\1\30\1\34\1\35\1\36\1\37\1\40\2\30\1\41"+
    "\1\30\1\42\1\43\1\30\1\44\1\45\1\46\1\30"+
    "\1\47\1\50\7\0\2\6\107\0\1\25\44\0\6\51"+
    "\1\52\26\51\1\53\15\51\1\0\14\51\7\0\1\25"+
    "\13\0\1\25\61\0\1\25\5\0\1\25\56\0\1\54"+
    "\4\0\1\55\3\0\1\25\64\0\1\16\14\0\1\56"+
    "\54\0\1\7\1\25\67\0\1\25\1\7\63\0\1\22"+
    "\5\0\6\22\4\0\23\22\5\0\3\57\2\0\5\57"+
    "\1\7\1\60\11\57\1\61\11\57\1\7\24\57\1\62"+
    "\2\57\27\0\6\63\4\0\23\63\7\0\3\27\61\0"+
    "\1\27\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\23\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\14\30\1\66"+
    "\6\30\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\4\30\1\67\16\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\15\30\1\70\5\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\14\30\1\71\1\72\5\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\1\73"+
    "\6\30\1\74\2\30\1\75\1\30\1\76\6\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\4\30\1\77\7\30\1\100\6\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\12\30\1\73\10\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\1\37\11\30\1\101\1\30\1\102\3\30\1\103\2\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\5\30\1\100\5\30\1\104\7\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\4\30\1\104\16\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\4\30\1\105\16\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\4\30"+
    "\1\106\16\30\3\0\1\64\3\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\17\30\1\107\2\30"+
    "\1\110\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\15\30\1\111\5\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\1\102\13\30\1\112\6\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\7\30\1\113\13\30\3\0\1\64\36\0\1\114"+
    "\44\0\1\115\21\0\1\116\33\0\3\55\2\0\62\55"+
    "\1\0\3\117\2\0\62\117\24\0\1\25\11\0\1\120"+
    "\67\0\1\121\55\0\1\25\11\0\1\122\52\0\1\63"+
    "\5\0\6\63\4\0\23\63\7\0\3\64\3\0\1\65"+
    "\55\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\13\30\1\123\7\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\1\124\22\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\10\30\1\125"+
    "\12\30\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\14\30\1\126\6\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\4\30\1\127\16\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\16\30\1\130\4\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\1\102\22\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\1\131\22\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\13\30\1\132\7\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\5\30\1\133"+
    "\15\30\3\0\1\64\2\0\1\134\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\23\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\14\30\1\135\6\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\15\30"+
    "\1\100\5\30\3\0\1\64\3\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\13\30\1\136\7\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\17\30\1\100\3\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\22\30\1\100\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\17\30\1\137"+
    "\3\30\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\15\30\1\140\5\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\10\30\1\141\12\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\20\30\1\130\2\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\10\30\1\142"+
    "\12\30\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\10\30\1\143\12\30\3\0"+
    "\1\64\1\0\3\51\2\0\62\51\35\0\1\144\111\0"+
    "\1\145\31\0\1\146\62\0\1\25\101\0\1\7\126\0"+
    "\1\25\5\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\16\30\1\147\4\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\3\30\1\150\17\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\17\30\1\151"+
    "\3\30\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\12\30\1\100\10\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\1\152\22\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\4\30"+
    "\1\100\16\30\3\0\1\64\3\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\16\30\1\153\4\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\17\30\1\154\3\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\1\155\22\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\1\104\22\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\2\30\1\100\20\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\20\30\1\156\2\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\10\30"+
    "\1\157\7\30\1\160\2\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\17\30"+
    "\1\161\3\30\3\0\1\64\3\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\3\30\1\100\17\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\12\30\1\130\10\30\3\0\1\64"+
    "\40\0\1\162\62\0\1\163\37\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\14\30\1\143\6\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\2\30\1\164\3\30\4\0\23\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\4\30\1\165\16\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\11\30"+
    "\1\100\11\30\3\0\1\64\3\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\16\30\1\100\4\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\10\30\1\166\12\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\20\30\1\167\2\30\3\0\1\64\3\0\3\64"+
    "\3\0\1\65\7\0\1\30\5\0\6\30\4\0\15\30"+
    "\1\170\5\30\3\0\1\64\3\0\3\64\3\0\1\65"+
    "\7\0\1\30\5\0\6\30\4\0\13\30\1\171\7\30"+
    "\3\0\1\64\3\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\2\30\1\104\20\30\3\0\1\64"+
    "\3\0\3\64\3\0\1\65\7\0\1\30\5\0\6\30"+
    "\4\0\2\30\1\172\20\30\3\0\1\64\37\0\1\173"+
    "\67\0\1\174\33\0\3\64\3\0\1\65\7\0\1\30"+
    "\5\0\6\30\4\0\10\30\1\175\12\30\3\0\1\64"+
    "\2\0\1\134\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\2\30\1\164\3\30\4\0\23\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\13\30\1\111\7\30\3\0\1\64\3\0\3\64\3\0"+
    "\1\65\7\0\1\30\5\0\6\30\4\0\12\30\1\104"+
    "\10\30\3\0\1\64\3\0\3\64\3\0\1\65\7\0"+
    "\1\30\5\0\6\30\4\0\13\30\1\100\7\30\3\0"+
    "\1\64\3\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\6\30\1\100\14\30\3\0\1\64\3\0"+
    "\3\64\3\0\1\65\7\0\1\30\5\0\6\30\4\0"+
    "\7\30\1\100\13\30\3\0\1\64\13\0\1\176\67\0"+
    "\1\177\57\0\3\64\3\0\1\65\7\0\1\30\5\0"+
    "\6\30\4\0\13\30\1\130\7\30\3\0\1\64\26\0"+
    "\1\200\67\0\1\201\77\0\1\202\67\0\1\203\44\0"+
    "\1\204\67\0\1\205\74\0\1\206\67\0\1\207\134\0"+
    "\1\210\22\0\1\211\67\0\1\212\67\0\1\213\66\0"+
    "\1\214\63\0\1\215\55\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7168];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\2\11\3\1\1\11\4\1\2\11"+
    "\1\0\1\1\22\0\1\11\2\0\1\1\1\0\1\11"+
    "\4\1\1\0\1\11\46\0\1\11\11\0\1\1\40\0"+
    "\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DreamLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 18: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 19: break;
          case 3:
            { return DreamTokenTypes.OPERATOR;
            }
          // fall through
          case 20: break;
          case 4:
            { return DreamTokenTypes.PAREN;
            }
          // fall through
          case 21: break;
          case 5:
            { return DreamTokenTypes.COMMA;
            }
          // fall through
          case 22: break;
          case 6:
            { return DreamTokenTypes.NUMBER;
            }
          // fall through
          case 23: break;
          case 7:
            { return DreamTokenTypes.SEMICOLON;
            }
          // fall through
          case 24: break;
          case 8:
            { return DreamTokenTypes.IDENTIFIER;
            }
          // fall through
          case 25: break;
          case 9:
            { return DreamTokenTypes.BRACKET;
            }
          // fall through
          case 26: break;
          case 10:
            { return DreamTokenTypes.BRACE;
            }
          // fall through
          case 27: break;
          case 11:
            { return DreamTokenTypes.STRING;
            }
          // fall through
          case 28: break;
          case 12:
            { return DreamTokenTypes.COMMENT;
            }
          // fall through
          case 29: break;
          case 13:
            { return DreamTokenTypes.DOT;
            }
          // fall through
          case 30: break;
          case 14:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return DreamTokenTypes.FUNCTION;
            }
          // fall through
          case 31: break;
          case 15:
            { return DreamTokenTypes.KEYWORD;
            }
          // fall through
          case 32: break;
          case 16:
            { return DreamTokenTypes.COMMENTBLOCK;
            }
          // fall through
          case 33: break;
          case 17:
            { return DreamTokenTypes.COMMENTDOC;
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
