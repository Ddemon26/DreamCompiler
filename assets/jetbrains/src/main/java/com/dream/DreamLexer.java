// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/com/dream/DreamLexer.flex

package com.dream;


public class DreamLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\2\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\0\1\22\1\23"+
    "\1\24\1\25\1\26\1\0\2\27\1\30\10\27\1\31"+
    "\5\27\1\32\1\27\1\33\2\27\1\34\3\27\1\35"+
    "\1\36\1\35\1\37\1\27\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\27\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\27\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\27\1\67"+
    "\1\70\1\67\1\71\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\4\1\7\1\4\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\13\1\15\3\16\1\17\1\5\20\16"+
    "\1\20\2\5\1\13\1\0\1\21\1\0\1\4\1\3"+
    "\2\0\1\22\1\0\1\23\1\0\1\15\14\16\1\24"+
    "\24\16\2\25\2\0\1\23\1\26\1\11\1\15\21\16"+
    "\1\27\1\30\12\16\3\0\1\31\1\16\1\30\15\16"+
    "\1\32\1\16\1\31\1\26\16\16\1\0\2\16\2\0"+
    "\2\16\2\0\2\16\2\0\2\16\2\0\2\16\1\0"+
    "\1\33\1\16\1\33\1\0\1\16\1\0\1\16\2\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\72\0\u01d0\0\72\0\u020a\0\72\0\u0244\0\u027e\0\72"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\72"+
    "\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\72\0\u0828\0\72\0\72\0\350\0\72\0\u0862"+
    "\0\72\0\72\0\u089c\0\u08d6\0\72\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u03a0\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\72\0\u089c\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u0984\0\72\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512"+
    "\0\u154c\0\u1586\0\u15c0\0\u03a0\0\u03a0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u1878\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u03a0\0\u1c52\0\u1138\0\u1878\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u231e\0\u2440\0\u2392\0\u247a\0\u24b4\0\u24ee\0\u2528\0\72"+
    "\0\u03a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\25\1\27\1\25\1\30\1\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\25\1\40\1\25\1\41"+
    "\1\42\1\43\2\25\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\25\1\52\1\53\1\54\73\0\2\3\1\0"+
    "\1\3\111\0\1\55\45\0\2\56\1\0\3\56\1\57"+
    "\27\56\1\60\33\56\24\0\1\61\55\0\1\62\13\0"+
    "\1\54\45\0\2\63\1\0\6\63\1\0\24\63\1\64"+
    "\33\63\14\0\1\61\7\0\1\61\63\0\1\61\5\0"+
    "\1\61\1\65\57\0\1\66\4\0\1\67\3\0\1\61"+
    "\64\0\1\70\1\0\1\17\73\0\1\31\1\55\71\0"+
    "\1\55\1\65\70\0\1\55\1\31\72\0\1\71\64\0"+
    "\1\25\5\0\6\25\3\0\27\25\24\0\1\25\5\0"+
    "\6\25\3\0\15\25\1\72\11\25\24\0\1\25\5\0"+
    "\6\25\3\0\1\73\26\25\27\0\1\54\66\0\1\25"+
    "\5\0\6\25\3\0\20\25\1\74\3\25\1\75\2\25"+
    "\24\0\1\25\5\0\6\25\3\0\1\76\14\25\1\77"+
    "\1\25\1\100\7\25\24\0\1\25\5\0\6\25\3\0"+
    "\1\101\6\25\1\102\2\25\1\103\2\25\1\104\11\25"+
    "\24\0\1\25\5\0\6\25\3\0\4\25\1\105\10\25"+
    "\1\106\11\25\24\0\1\25\5\0\6\25\3\0\12\25"+
    "\1\107\12\25\1\110\1\25\24\0\1\25\5\0\6\25"+
    "\3\0\1\111\7\25\1\112\1\25\1\113\2\25\1\114"+
    "\4\25\1\115\4\25\24\0\1\25\5\0\6\25\3\0"+
    "\5\25\1\106\5\25\1\110\1\116\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\4\25\1\117\22\25\24\0\1\25"+
    "\5\0\6\25\3\0\15\25\1\120\11\25\24\0\1\25"+
    "\5\0\6\25\3\0\4\25\1\121\22\25\24\0\1\25"+
    "\5\0\6\25\3\0\4\25\1\122\22\25\24\0\1\25"+
    "\5\0\6\25\3\0\21\25\1\123\2\25\1\124\2\25"+
    "\24\0\1\25\5\0\6\25\3\0\7\25\1\125\7\25"+
    "\1\126\7\25\24\0\1\25\5\0\6\25\3\0\20\25"+
    "\1\127\6\25\24\0\1\25\5\0\6\25\3\0\1\130"+
    "\14\25\1\131\11\25\24\0\1\25\5\0\6\25\3\0"+
    "\7\25\1\132\17\25\27\0\1\54\43\0\1\62\1\0"+
    "\2\56\3\0\65\56\11\0\1\133\60\0\2\63\3\0"+
    "\4\63\1\134\60\63\13\135\1\136\56\135\2\137\1\0"+
    "\1\137\1\0\13\137\1\140\51\137\21\0\1\141\74\0"+
    "\1\142\66\0\1\25\5\0\6\25\3\0\14\25\1\143"+
    "\12\25\24\0\1\25\5\0\6\25\3\0\20\25\1\144"+
    "\6\25\24\0\1\25\5\0\6\25\3\0\26\25\1\115"+
    "\24\0\1\25\5\0\6\25\3\0\1\145\26\25\24\0"+
    "\1\25\5\0\6\25\3\0\20\25\1\146\6\25\24\0"+
    "\1\25\5\0\6\25\3\0\15\25\1\147\11\25\24\0"+
    "\1\25\5\0\6\25\3\0\4\25\1\150\22\25\24\0"+
    "\1\25\5\0\6\25\3\0\20\25\1\151\1\152\5\25"+
    "\24\0\1\25\5\0\6\25\3\0\1\153\26\25\24\0"+
    "\1\25\5\0\6\25\3\0\1\154\26\25\24\0\1\25"+
    "\5\0\6\25\3\0\14\25\1\155\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\5\25\1\156\21\25\24\0\1\25"+
    "\5\0\6\25\3\0\20\25\1\151\6\25\24\0\1\25"+
    "\5\0\6\25\3\0\16\25\1\157\10\25\24\0\1\25"+
    "\5\0\6\25\3\0\12\25\1\160\14\25\24\0\1\25"+
    "\5\0\6\25\3\0\14\25\1\161\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\15\25\1\162\11\25\24\0\1\25"+
    "\5\0\6\25\3\0\17\25\1\106\7\25\24\0\1\25"+
    "\5\0\6\25\3\0\14\25\1\163\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\21\25\1\164\5\25\24\0\1\25"+
    "\5\0\6\25\3\0\21\25\1\165\5\25\24\0\1\25"+
    "\5\0\6\25\3\0\3\25\1\166\23\25\24\0\1\25"+
    "\5\0\6\25\3\0\24\25\1\165\2\25\24\0\1\25"+
    "\5\0\6\25\3\0\21\25\1\167\5\25\24\0\1\25"+
    "\5\0\6\25\3\0\1\170\16\25\1\171\7\25\24\0"+
    "\1\25\5\0\6\25\3\0\10\25\1\172\16\25\24\0"+
    "\1\25\5\0\6\25\3\0\17\25\1\173\7\25\24\0"+
    "\1\25\5\0\6\25\3\0\22\25\1\174\3\25\1\106"+
    "\24\0\1\25\5\0\6\25\3\0\10\25\1\175\16\25"+
    "\24\0\1\25\5\0\6\25\3\0\17\25\1\165\7\25"+
    "\24\0\1\25\5\0\6\25\3\0\10\25\1\176\16\25"+
    "\24\0\1\25\5\0\6\25\3\0\10\25\1\177\16\25"+
    "\3\0\13\135\1\200\56\135\13\201\1\202\4\201\1\203"+
    "\51\201\2\137\1\0\1\137\1\0\65\137\2\140\1\0"+
    "\1\140\1\0\65\140\21\0\1\25\5\0\6\25\3\0"+
    "\20\25\1\204\6\25\24\0\1\25\5\0\6\25\3\0"+
    "\11\25\1\205\15\25\24\0\1\25\5\0\6\25\3\0"+
    "\10\25\1\117\16\25\24\0\1\25\5\0\6\25\3\0"+
    "\4\25\1\165\22\25\24\0\1\25\5\0\6\25\3\0"+
    "\12\25\1\164\14\25\24\0\1\25\5\0\6\25\3\0"+
    "\1\206\26\25\24\0\1\25\5\0\6\25\3\0\4\25"+
    "\1\106\22\25\24\0\1\25\5\0\6\25\3\0\2\25"+
    "\1\207\24\25\24\0\1\25\5\0\6\25\3\0\17\25"+
    "\1\164\7\25\24\0\1\25\5\0\6\25\3\0\20\25"+
    "\1\210\6\25\24\0\1\25\5\0\6\25\3\0\21\25"+
    "\1\211\5\25\24\0\1\25\5\0\6\25\3\0\1\212"+
    "\26\25\24\0\1\25\5\0\6\25\3\0\15\25\1\213"+
    "\11\25\24\0\1\25\5\0\6\25\3\0\20\25\1\174"+
    "\6\25\24\0\1\25\5\0\6\25\3\0\1\214\26\25"+
    "\24\0\1\25\5\0\6\25\3\0\1\116\26\25\24\0"+
    "\1\25\5\0\6\25\3\0\2\25\1\165\24\25\24\0"+
    "\1\25\5\0\6\25\3\0\22\25\1\215\4\25\24\0"+
    "\1\25\5\0\6\25\3\0\22\25\1\216\4\25\24\0"+
    "\1\25\5\0\6\25\3\0\21\25\1\217\5\25\24\0"+
    "\1\25\5\0\6\25\3\0\10\25\1\220\11\25\1\221"+
    "\4\25\24\0\1\25\5\0\6\25\3\0\21\25\1\152"+
    "\5\25\24\0\1\25\5\0\6\25\3\0\15\25\1\222"+
    "\11\25\24\0\1\25\5\0\6\25\3\0\4\25\1\223"+
    "\22\25\24\0\1\25\5\0\6\25\3\0\14\25\1\224"+
    "\12\25\24\0\1\25\5\0\6\25\3\0\3\25\1\164"+
    "\23\25\24\0\1\25\5\0\6\25\3\0\12\25\1\151"+
    "\14\25\3\0\13\135\1\200\4\135\1\225\51\135\13\201"+
    "\1\202\71\201\1\202\4\201\1\226\51\201\21\0\1\25"+
    "\5\0\6\25\3\0\15\25\1\227\11\25\24\0\1\25"+
    "\5\0\3\25\1\230\2\25\3\0\27\25\24\0\1\25"+
    "\5\0\6\25\3\0\11\25\1\106\15\25\24\0\1\25"+
    "\5\0\6\25\3\0\7\25\1\106\17\25\24\0\1\25"+
    "\5\0\6\25\3\0\20\25\1\165\6\25\24\0\1\25"+
    "\5\0\6\25\3\0\10\25\1\231\16\25\24\0\1\25"+
    "\5\0\6\25\3\0\22\25\1\232\4\25\24\0\1\25"+
    "\5\0\6\25\3\0\17\25\1\117\7\25\24\0\1\25"+
    "\5\0\6\25\3\0\12\25\1\233\14\25\24\0\1\25"+
    "\5\0\6\25\3\0\12\25\1\146\14\25\24\0\1\25"+
    "\5\0\6\25\3\0\17\25\1\234\7\25\24\0\1\25"+
    "\5\0\6\25\3\0\10\25\1\163\16\25\24\0\1\25"+
    "\5\0\6\25\3\0\14\25\1\235\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\2\25\1\117\24\25\24\0\1\25"+
    "\5\0\6\25\3\0\24\25\1\106\2\25\24\0\1\25"+
    "\5\0\6\25\3\0\6\25\1\165\20\25\24\0\1\25"+
    "\5\0\6\25\3\0\12\25\1\236\14\25\24\0\1\25"+
    "\5\0\6\25\3\0\4\25\1\237\22\25\24\0\1\25"+
    "\5\0\6\25\3\0\14\25\1\240\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\12\25\1\241\14\25\24\0\1\25"+
    "\5\0\6\25\3\0\12\25\1\242\14\25\24\0\1\25"+
    "\5\0\6\25\3\0\14\25\1\106\12\25\24\0\1\25"+
    "\5\0\6\25\3\0\6\25\1\164\20\25\24\0\1\25"+
    "\5\0\6\25\3\0\4\25\1\243\22\25\24\0\1\25"+
    "\5\0\6\25\3\0\20\25\1\244\6\25\24\0\1\25"+
    "\5\0\6\25\3\0\22\25\1\151\4\25\24\0\1\25"+
    "\5\0\6\25\3\0\21\25\1\106\5\25\24\0\1\25"+
    "\5\0\6\25\3\0\26\25\1\106\3\0\2\245\3\0"+
    "\14\245\1\246\5\245\6\246\3\245\27\246\3\245\21\0"+
    "\1\25\5\0\6\25\3\0\22\25\1\247\4\25\35\0"+
    "\1\250\1\0\1\251\56\0\1\25\5\0\3\25\1\252"+
    "\1\25\1\253\3\0\27\25\24\0\1\25\5\0\6\25"+
    "\3\0\12\25\1\117\14\25\47\0\1\254\104\0\1\255"+
    "\33\0\1\25\5\0\6\25\3\0\4\25\1\256\22\25"+
    "\24\0\1\25\5\0\6\25\3\0\17\25\1\257\7\25"+
    "\43\0\1\260\101\0\1\261\42\0\1\25\5\0\6\25"+
    "\3\0\1\262\26\25\24\0\1\25\5\0\6\25\3\0"+
    "\10\25\1\263\16\25\46\0\1\264\107\0\1\265\31\0"+
    "\1\25\5\0\6\25\3\0\3\25\1\266\23\25\24\0"+
    "\1\25\5\0\6\25\3\0\21\25\1\267\5\25\34\0"+
    "\1\270\104\0\1\271\46\0\1\25\5\0\2\25\1\272"+
    "\3\25\3\0\27\25\24\0\1\25\5\0\6\25\3\0"+
    "\4\25\1\273\22\25\53\0\1\274\42\0\1\25\5\0"+
    "\6\25\3\0\10\25\1\275\16\25\57\0\1\276\36\0"+
    "\1\25\5\0\6\25\3\0\14\25\1\277\12\25\47\0"+
    "\1\300\46\0\1\25\5\0\6\25\3\0\4\25\1\301"+
    "\22\25\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9570];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\7\1\1\11\21\1\1\11\1\1\2\11"+
    "\1\0\1\11\1\0\2\11\2\0\1\11\1\0\1\1"+
    "\1\0\42\1\1\11\1\1\2\0\3\1\1\11\35\1"+
    "\3\0\42\1\1\0\2\1\2\0\2\1\2\0\2\1"+
    "\2\0\2\1\2\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DreamLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public com.intellij.psi.tree.IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 28: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 29: break;
          case 3:
            { return DreamTokenTypes.OPERATORLOGICAL;
            }
          // fall through
          case 30: break;
          case 4:
            { return DreamTokenTypes.OPERATORARITHMETIC;
            }
          // fall through
          case 31: break;
          case 5:
            { return DreamTokenTypes.OPERATORBITWISE;
            }
          // fall through
          case 32: break;
          case 6:
            { return DreamTokenTypes.PAREN;
            }
          // fall through
          case 33: break;
          case 7:
            { return DreamTokenTypes.COMMA;
            }
          // fall through
          case 34: break;
          case 8:
            { return DreamTokenTypes.DOT;
            }
          // fall through
          case 35: break;
          case 9:
            { return DreamTokenTypes.NUMBER;
            }
          // fall through
          case 36: break;
          case 10:
            { return DreamTokenTypes.SEMICOLON;
            }
          // fall through
          case 37: break;
          case 11:
            { return DreamTokenTypes.OPERATORCOMPARISON;
            }
          // fall through
          case 38: break;
          case 12:
            { return DreamTokenTypes.OPERATORASSIGNMENT;
            }
          // fall through
          case 39: break;
          case 13:
            { return DreamTokenTypes.OPERATORCONDITIONAL;
            }
          // fall through
          case 40: break;
          case 14:
            { return DreamTokenTypes.IDENTIFIER;
            }
          // fall through
          case 41: break;
          case 15:
            { return DreamTokenTypes.BRACKET;
            }
          // fall through
          case 42: break;
          case 16:
            { return DreamTokenTypes.BRACE;
            }
          // fall through
          case 43: break;
          case 17:
            { return DreamTokenTypes.STRING;
            }
          // fall through
          case 44: break;
          case 18:
            { return DreamTokenTypes.OPERATORARROW;
            }
          // fall through
          case 45: break;
          case 19:
            { return DreamTokenTypes.COMMENT;
            }
          // fall through
          case 46: break;
          case 20:
            { return DreamTokenTypes.KEYWORD;
            }
          // fall through
          case 47: break;
          case 21:
            { return DreamTokenTypes.CHAR;
            }
          // fall through
          case 48: break;
          case 22:
            { return DreamTokenTypes.COMMENTDOC;
            }
          // fall through
          case 49: break;
          case 23:
            { return DreamTokenTypes.KEYWORDTYPE;
            }
          // fall through
          case 50: break;
          case 24:
            { return DreamTokenTypes.KEYWORDOTHER;
            }
          // fall through
          case 51: break;
          case 25:
            { return DreamTokenTypes.COMMENTBLOCK;
            }
          // fall through
          case 52: break;
          case 26:
            { return DreamTokenTypes.KEYWORDLITERAL;
            }
          // fall through
          case 53: break;
          case 27:
            { return DreamTokenTypes.CONSOLEFUNCTION;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
