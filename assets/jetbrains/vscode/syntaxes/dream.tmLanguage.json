{
  "$schema": "https://raw.githubusercontent.com/microsoft/vscode/master/extensions/theme-defaults/test/colorize-fixtures/TMGrammarSchema.json",
  "scopeName": "source.dream",
  "patterns": [
    {
      "include": "#tokens"
    }
  ],
  "repository": {
    "tokens": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|else|while|for|do|break|continue|return|switch|case|default|try|catch|finally|throw)\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b(int|string|bool|float|char|void)\\b"
        },
        {
          "name": "keyword.other",
          "match": "\\b(class|struct|static|new|func|var|let|base|using|import|module|export|async|await|Task|TaskResult)\\b"
        },
        {
          "name": "constant.language",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b([0-9]+\\\\.[0-9]+|[0-9]+)\\b"
        },
        {
          "name": "string.quoted.double",
          "match": "\\\"([^\\\\\\\"\\\\n]|\\\\\\\\.)*\\\""
        },
        {
          "name": "string.quoted.single",
          "match": "'([^'\\\\n]|\\\\\\\\.)'"
        },
        {
          "name": "comment.block.documentation",
          "match": "/\\*\\*[^]*?\\*/|///.*"
        },
        {
          "name": "comment.line.double-slash",
          "match": "//.*"
        },
        {
          "name": "comment.block",
          "match": "/\\*[\\s\\S]*?\\*/"
        },
        {
          "name": "support.function",
          "match": "\\b(Console)\\.(WriteLine|Write|ReadLine)\\b"
        },
        {
          "name": "meta.function.declaration",
          "match": "\\bfunc\\s+(?:(int|string|bool|float|char|void)\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "storage.type.return-type" },
            "2": { "name": "entity.name.function" }
          }
        },
        {
          "name": "entity.name.function.call",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
        },
        {
          "name": "meta.parameter.declaration",
          "match": "\\b(int|string|bool|float|char|void)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*[,)])",
          "captures": {
            "1": { "name": "storage.type" },
            "2": { "name": "variable.parameter" }
          }
        },
        {
          "name": "variable.other",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\+\\+|--|\\+=|-=|\\*=|/=|%=|\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.bitwise",
          "match": "&=|\\|=|\\^=|<<=|>>=|&|\\||\\^|<<|>>|~"
        },
        {
          "name": "keyword.operator.comparison",
          "match": "<=|>=|==|!=|<|>"
        },
        {
          "name": "keyword.operator.logical",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment",
          "match": "="
        },
        {
          "name": "keyword.operator.conditional",
          "match": "\\?|\\?\\?|\\?\\?="
        },
        {
          "name": "keyword.operator.arrow",
          "match": "->|=>"
        },
        {
          "name": "punctuation.terminator.statement",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma",
          "match": ","
        },
        {
          "name": "punctuation.accessor",
          "match": "\\\\."
        },
        {
          "name": "punctuation.section.parens",
          "match": "[()]"
        },
        {
          "name": "punctuation.section.braces",
          "match": "[{}]"
        },
        {
          "name": "punctuation.section.brackets",
          "match": "[\\\\[\\\\]]"
        }
      ]
    }
  }
}