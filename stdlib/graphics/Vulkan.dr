import stdlib;

// Basic Vulkan handle representation using a 64-bit integer
struct VkHandle {
  int value;
}

// Opaque handles for common Vulkan objects
struct VkInstance { int value; }
struct VkPhysicalDevice { int value; }
struct VkDevice { int value; }
struct VkQueue { int value; }
struct VkCommandBuffer { int value; }
struct VkSurfaceKHR { int value; }
struct VkSwapchainKHR { int value; }
struct VkBuffer { int value; }
struct VkDeviceMemory { int value; }
struct VkShaderModule { int value; }
struct VkPipelineLayout { int value; }
struct VkDescriptorSetLayout { int value; }
struct VkDescriptorPool { int value; }
struct VkDescriptorSet { int value; }

// Helper structure returned by Vulkan.enumeratePhysicalDevices
struct VkPhysicalDeviceList {
  VkPhysicalDevice* devices;
  int count;
}

// Primary result codes returned by Vulkan functions
enum VkResult {
  Success = 0,
  NotReady = 1,
  Timeout = 2,
  EventSet = 3,
  EventReset = 4,
  Incomplete = 5,
  ErrorOutOfHostMemory = -1,
  ErrorOutOfDeviceMemory = -2,
  ErrorInitializationFailed = -3,
  ErrorDeviceLost = -4,
}

// Minimal subset of VkApplicationInfo for instance creation
struct VkApplicationInfo {
  string applicationName;
  string engineName;
  int   apiVersion;
}

// Minimal subset of VkInstanceCreateInfo referencing application info
struct VkInstanceCreateInfo {
  VkApplicationInfo* appInfo;
  int enabledExtensionCount;
  int ppEnabledExtensionNames; // char*[] pointer
}

// Minimal device creation structures
struct VkDeviceQueueCreateInfo {
  int queueFamilyIndex;
  int queueCount;
  int pQueuePriorities; // float* pointer
}

struct VkDeviceCreateInfo {
  int queueCreateInfoCount;
  VkDeviceQueueCreateInfo* pQueueCreateInfos;
}

struct VkBufferCreateInfo {
  int size;
  int usage;
  int sharingMode;
}

struct VkMemoryAllocateInfo {
  int allocationSize;
  int memoryTypeIndex;
}

struct VkShaderModuleCreateInfo {
  int codeSize;
  int  pCode; // uint32_t* pointer
}

struct VkDescriptorSetLayoutBinding {
  int binding;
  int descriptorType;
  int descriptorCount;
  int stageFlags;
  int pImmutableSamplers; // VkSampler* pointer
}

struct VkDescriptorSetLayoutCreateInfo {
  int bindingCount;
  VkDescriptorSetLayoutBinding* pBindings;
}

struct VkPipelineLayoutCreateInfo {
  int setLayoutCount;
  VkDescriptorSetLayout* pSetLayouts;
  int pushConstantRangeCount;
  int pPushConstantRanges; // VkPushConstantRange* pointer
}

// Platform surface creation info
// Windows: hinstance & hwnd
// Linux:  xcb_connection_t* & window id
struct VkSurfaceCreateInfo {
  int handle1;
  int handle2;
}

struct VkAllocationCallbacks {
  int userData;
}
