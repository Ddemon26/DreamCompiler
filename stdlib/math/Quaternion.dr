package Math;

public class Quaternion {
    public float w;
    public float x;
    public float y;
    public float z;

    public Quaternion(float w, float x, float y, float z) {
        this.w = w;
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public Quaternion Conjugate() {
        return new Quaternion(w, -x, -y, -z);
    }

    public float Magnitude() {
        return sqrt(w * w + x * x + y * y + z * z);
    }

    public Quaternion Normalize() {
        float magnitude = Magnitude();
        if (magnitude == 0) {
            throw "Cannot normalize a zero quaternion.";
        }
        return new Quaternion(w / magnitude, x / magnitude, y / magnitude, z / magnitude);
    }

    public Quaternion Multiply(Quaternion other) {
        return new Quaternion(
            w * other.w - x * other.x - y * other.y - z * other.z,
            w * other.x + x * other.w + y * other.z - z * other.y,
            w * other.y - x * other.z + y * other.w + z * other.x,
            w * other.z + x * other.y - y * other.x + z * other.w
        );
    }

    public Quaternion Scale(float scalar) {
        return new Quaternion(w * scalar, x * scalar, y * scalar, z * scalar);
    }

    public float Dot(Quaternion other) {
        return w * other.w + x * other.x + y * other.y + z * other.z;
    }

    public Quaternion Inverse() {
        float magnitudeSquared = w * w + x * x + y * y + z * z;
        if (magnitudeSquared == 0) {
            throw "Cannot invert a zero quaternion.";
        }
        Quaternion conjugate = Conjugate();
        return new Quaternion(
            conjugate.w / magnitudeSquared,
            conjugate.x / magnitudeSquared,
            conjugate.y / magnitudeSquared,
            conjugate.z / magnitudeSquared
        );
    }
}
