#nullable enable
namespace System;

public delegate void Action();
public delegate void Action<T>(T obj)  where T : allows ref struct;
public delegate void Action<T1, T2>(T1 obj1, T2 obj2) where T1 : allows ref struct where T2 : allows ref struct;
public delegate void Action<T1, T2, T3>(T1 obj1, T2 obj2, T3 obj3) where T1 : allows ref struct where T2 : allows ref struct where T3 : allows ref struct;
public delegate void Action<T1, T2, T3, T4>(T1 obj1, T2 obj2, T3 obj3, T4 obj4) where T1 : allows ref struct where T2 : allows ref struct where T3 : allows ref struct where T4 : allows ref struct;
public delegate void Action<T1, T2, T3, T4, T5>(T1 obj1, T2 obj2, T3 obj3, T4 obj4, T5 obj5) where T1 : allows ref struct where T2 : allows ref struct where T3 : allows ref struct where T4 : allows ref struct where T5 : allows ref struct;


public interface ICloneable{
  object Clone();
}

public interface IList : ICollection, IEnumerable{
  object? this[int index] { get; set; }
  int Add(object? value);
  bool Contains(object? value);
  void Clear();
  bool IsReadOnly { get; }
  bool IsFixedSize { get; }
  int IndexOf(object? value);
  void Insert(int index, object? value);
  void Remove(object? value);
  void RemoveAt(int index);
}

public interface ICollection : IEnumerable{
  void CopyTo(Array array, int index);
  int Count { get; }
  object SyncRoot { get; }
  bool IsSynchronized { get; }
}

public interface IEnumerable{
  IEnumerator GetEnumerator();
}

public interface IStructuralComparable{
  int CompareTo(object? other, IComparer comparer);
}

public interface IStructuralEquatable{
  bool Equals(object? other, IEqualityComparer comparer);
  int GetHashCode(IEqualityComparer comparer);
}

